# Task 3

swagger: "2.0"
info:
  title: Karthik's API Documentation
  description: This is my assignment's API Documentation
  version: 1.0
  contact:
    email: bandarikarthik159@gmail.com
  servers:
    -url: http://localhost:3002
    description: This is my local Server
    -url: https://backend-tasks-clg4.onrender.com/
    description: This is my hosted URL
securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: "JWT Authorization header using the Bearer scheme"



paths:
  /register:
    post:
      tags:
        - Users
      summary: User Registration
      description: You need to enter the username and password in the request body. These details are sent to the database and stored in the Users table. The password is hashed using bcrypt library, before storing in the table. On successful insertion into the table, you will receive response that new user is created 
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: user details
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
              password_hash:
                type: string
      responses:
        200:
          description: User Registration Successful
        400:
          description: User already exists

  /login:
    post:
      tags:
        - Users
      summary: User Login
      description: You need to enter the username and password in the request body. These credentials are checked with the data in Users table with the help of bcrypt library. If the credentials you entered are correct then you will receive JWT token.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: user credentials
          schema:
            type: object
            required:
              - username
              - password_hash
            properties:
              username:
                type: string
              password_hash:
                type: string
      responses:
        200:
          description: User Logged In
        400:
          description: Invalid Credentials
        
  /changePassword:
    put:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Changing the password
      description: This is a protected API. The JWT token from the request header will be validated and only if the token is valid,then the new password will be replaced with the old password of the user. It uses the middleware function for the authentication. 
      parameters:
        - in: body
          name: New Password
          schema:
            type: object
            required:
              - newPassword
            properties:
              newPassword:
                type: string
      responses:
        200:   
          description: Password Changed Successfully
        401:
          description: Invalid JWT token
        500:
          description: Internal Server Error
    
  /tasks:
    get:
      tags:
        - Tasks
      security:
        - BearerAuth: []
      summary: Get all the tasks.
      responses:
        200:
          description: Success
          schema:
            type: array
            items: 
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                assignee_id:
                  type: integer
        401:
          description: Invalid JWT token
        500:
          description: Internal Server Error

    post:
      tags:
        - Tasks
      security:
        - BearerAuth: []
      summary: Create a task.
      parameters:
        - in: body
          name: Task Details
          schema:
            type: object
            required:
              - title
              - description
              - assignee_id
            properties:
              title:
                type: string
              description:
                type: string
              assignee_id:
                type: integer
      responses:
        200:   
          description: Successful Response
          schema: 
            type: object
            properties:
              id:
                type: integer
        401:
          description: Invalid JWT token
        500:
          description: Internal Server Error

  /tasks/{taskId}: 
    get:
      tags:
        - Tasks
      security:
        - BearerAuth: []
      summary: Get a task by ID
      operationId: getTaskById
      parameters:
        - name: taskId  
          in: path       
          description: ID of the task to retrieve
          required: true
          type: integer 
          format: int64  
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string
              description:
                type: string
              status:
                type: string
              assignee_id:
                type: integer
              created_at:
                type: string
              updated_at:
                type: string

    put:
      tags:
        - Tasks
      security:
        - BearerAuth: []
      summary: Update a task by ID
      operationId: updateTaskById
      parameters:
        - name: taskId 
          in: path      
          description: ID of the task to update
          required: true
          type: integer  
          format: int64 
        - in: body
          name: task
          description: Updated task object
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
              status:
                type: string
              assignee_id:
                type: integer
      responses:
        '200':
          description: Task updated successfully
        '404':
          description: Task not found
  
    delete:
      tags:
        - Tasks
      security:
        - BearerAuth: []
      summary: Delete a task by ID
      operationId: deleteTaskById
      parameters:
        - name: taskId 
          in: path      
          description: ID of the task to delete
          required: true
          type: integer 
          format: int64  
      responses:
        '200':
          description: Task deleted successfully
        '404':
          description: Task not found
            

  


